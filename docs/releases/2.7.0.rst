=====================================
Welcome to the new Pootle 2.7.0 alpha
=====================================

*Not yet released*

This is the first release of Pootle that combines the work of Evernote and
Translate.

Changes in Requirements
=======================
- Django >= 1.6.10 < 1.7
- `Translate Toolkit <http://toolkit.translatehouse.org/download.html>`_ >=
  1.12.0
- Python >= 2.6
- Redis - latest stable release.
- Raven 5.0.0 or higher is now recommended for Sentry support on production
  setups. While older versions should still work, they may encounter problems
  in newer versions of Django or Python.


Major Changes
=============

These are by no means exhaustive, check the `git log
<https://github.com/translate/pootle/compare/stable%2F2.5.1...master>`_
for more details.


- Statistics calculations:

  - Major rewrite of the way statistics are handled. RQ is used to manage the
    calculation of invalidated statistics.  On the frontend side, stats are now
    loaded asynchronously, thus any pending calculations no longer block page
    loads.
  - Custom word counting calculation method.


- Big revamp of UI:

  - We now have a wide stats table that shows the same data in the different
    levels. This affects several features which are now relocated in a sidebar:
    actions, instructions or current goal.
  - New navigation scheme using dropdowns.
  - Removed zoom feature. Now users should rely on their browsers.
  - *All Projects* page now shares the same browsing table as available in any
    other overview page.
  - When there are failing checks, overview tables now display the number of
    units which have failing checks, not the total number of failing checks.
  - Table sorting is now remembered across overview pages, and not separately
    in project, language and translation project pages.
  - Major speed improvements when calculating last action information.
  - User actionable items in the navbar have been moved to a drop-down.
  - When selecting languages, redirect logic is smarter now.
  - Different last activity messages for new translations and edits.
  - Added landing page for anonymous users.
  - The welcome page displays the top scorers over the last 30 days.
  - User score is displayed in the header and dynamically updated when
    translation actions are made.
  - Several layout improvements that take into account different screen sizes.
  - Filters allow sorting units according to their last action date.
  - New navigation scheme:
  
    + All directories/files for a project are displayed in a new drop-down.
      The differences between directories and files are visually highlighted.
    + Directories/files can be navigated and translated across multiple
      languages in a project.
    + Tabs have been replaced in favor of drop-down menus.
    + The editor search box is now displayed in the action links section,
      keeping its positioning consistent with the overview page.
    + A new action link in the editor, *Go back to overview*, allows users to
      go back to the same place they entered translation mode from.

  - Overview pages now report the last time a unit was added to a
    store/project. In the browsing tables a *Last Updated* column is displayed
    and in the extended stats *Created* and *Last Updated* dates.
  - Implemented project notifications by reusing static pages. Notifications
    are per-project and are displayed across languages (automatically adapting
    any hyperlinks).
  - Rewritten contact form. Allows both to contact site owners from any page as
    well as to report any issues with strings.
  - Revamped user profile pages. These now display user's latest activity and
    its personal properties.
  - Dropped support for old web browsers. Despite that Pootle might work on
    such browsers. More on :ref:`Supported Browsers <browsers>`.
  - Implemented export view for cross-language and cross-project views.
  - Implemented global search. This allows to perform searches and edit units
    in collections that span multiple projects across languages, multiple
    languages across projects, or even the whole server.


- Editor changes:

  - Added keyboard shortcuts help.
  - Several minor improvements.
  - Placeables are used to highlight parts of the source text and easily insert
    them into the translation.
  - Added screenshot prefix URL for projects, which allow integrating
    screenshots for units. The images are retrieved from public Evernote
    notebooks.
  - The editor now displays the numbering for units, not pages.
  - When going through all units in the translation editor, users will be
    automatically redirected back to overview.
  - If the currently-submitted unit has pending checks, the editor won't
    advance to the next unit and it will be updated displaying the unresolved
    checks.
  - Removed the concept of *pages* in the editor and its underlying APIs.  This
    was problematic and buggy.
  - The *Submit*/*Suggest* button is disabled until a change over the initial
    state of the unit is detected.
  - Muted checks are now displayed and can be unmuted. Apart from that, when a
    users mutes or unmutes a quality check, the action will be recorded in the
    unit's timeline.
  - Translation similarities are calculated in the client and sent to the
    server to calculate the user's score. The score changes are logged over
    time. Along with this, the best matches are highlighted in the editor.
  - The same string can't be suggested more than once at the same time,
    avoiding duplicated suggestions pending review.
  - Fixed the gallery mode for unit images and related fixes.
  - TM diffs now display what has been removed and what's being added.
  - Latest translator comments can be "removed" or, in other words, can be
    blanked. The action is recorded in the timeline.


- Command changes:

  - ``update_stores``: if a directory doesn't exist while running the command,
    the project or translation project will be disabled.
  - The ``update_translation_projects`` command has been removed — it's
    functionality has been merged into ``update_stores``.
  - Added the ``changed_languages`` management command.
  - Translation projects are not deleted from the filesystem but marked as
    disabled in the DB when running ``update_translation_projects --cleanup``.
  - Individual quality checks can now be recalculated via the ``--check`` flag
    passed to the ``refresh_stats`` management command.
  - Added ``--calculate-checks`` parameter to the ``refresh_stats`` command.
  - Incorporated ``refresh_all_stats`` functionality into ``refresh_stats``.
  - Using dumpdata and loaddata to move between databases is no longer
    supported.  If you need to move, please use proper SQL scripts instead.
  - Added a new ``system`` user to attribute to changes done by the management
    commands.
  - Command and action logging.


- Internal changes:

  - Switched to a custom user model. This merges the data and functionality
    available in `auth.User` and `PootleProfile` before, and has allowed to
    remove the dependency on deprecated third party apps that were bundled in
    the code.
  - The multiple Suggestion models have been merged into a single model.
  - Changed the way units needing to be sync'ed to disk is determined. Units
    now have a unique revision number within the store they belong to and
    they'll be synchronized based on the `last_sync_revision` field of the
    store.
  - Tests have been resurrected.
  - Upgraded jQuery to 2.x and applied a bunch of fixes to the Tipsy plugin,
    avoiding ad-hoc hacks to remove dangling tips.
  - Translation projects now have a ``creation_time`` field.
  - Dropped code for several external apps from Pootle codebase. Also upgraded
    to newer versions of those apps.
  - The default caching in database has been replaced by local-memory caching.
    Using memcached is still highly recommended.
  - Fixed and avoided any inconsistencies in the unit's submitter information.


- Sysadmins:

  - The registration and authentication layer is now handled by django-allauth.
    This gives Pootle implicit support for OpenID, OAuth, OAuth2 and Persona
    sign-in protocols.
  - Integrated ElasticSearch-based local TM server into Pootle. Unit
    submissions update the index instantly.
  - Upgrade: Direct upgrade is now only possible from 2.6.0
  - The report target for reporting string errors has been dropped in favor of
    a report email address. The report is now sent using an automatically
    pre-filled  contact form. If the project doesn't have a report email then
    the reports are sent to :setting:`POOTLE_REPORT_STRING_ERRORS_EMAIL`.


- Administrators:

  - Only admins can set the fuzzy flag on the unit. Non-admin users are not
    shown the fuzzy checkbox by default, but in case it's displayed (because
    the unit was already fuzzy, or some other action turned it fuzzy, such as
    using MT), they are always forced to clear the flag.
  - Projects can be disabled from the administration page, allowing to hide
    them temporarily while retaining statistics.
  - The ``view`` permission is now project-centric, it can be set server-wide
    or for projects, but not for individual language-project combinations.



Removed features
================

We have dropped some legacy features we kept around for allowing a swift
upgrade in the past.

The removal of some of these feature required extensive changes on the
upgrading code, which resulted in that upgrading directly from ancient versions
is no longer possible. In case you are trying to upgrade from Pootle 2.1.0 or
older you must first upgrade to 2.1.6 before upgrading to this version.

These are the features we got rid of:

- .pending and .tm files support: Not necessary since the updatetm tool was
  removed in Pootle 2.5.0.
- Live translation: Rarely enabled, and it was discouraged to use it.
- Autosync: It was recommended to never use it. The files can now be synced
  instead using the appropriate management commands.

The voting feature for terminology suggestions has also been removed, due to
its low popularity and high maintenance cost. In order to save existing voting
data, make a backup of the ``voting_vote`` table before upgrading.


...and lots of refactoring, upgrades of upstream code, cleanups to remove
Django 1.4 specifics, improved documentation and of course, loads of bugs were
fixed.


- Major cleanups and removed unused features. For more details check the
  `<upstream-differences>`_ document.



Credits
=======

This release was made possible by the following people:

%CONTRIBUTORS%

And to all our bug finders, testers and translators, a Very BIG Thank You.
