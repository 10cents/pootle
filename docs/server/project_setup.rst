.. _project_setup:

Create a Project
================

Now that you have the server up and running, this guide will help you to setup
translations on the server.


Assumptions
-----------

To simplify the example we are making these assumptions:

- You are setting up a project which consists of PO files.
- You can copy those files to the server where Pootle is.
- You have a template file in POT format containing the strings that need to be
  translated.
- The project uses the GNU layout. More information on what this is will be
  provided below.
- Pootle is correctly set up and running.
- There is at least one **rqworker** thread running. This is important.
- You are logged into the Pootle server using your newly created administrator
  user.


.. _project_setup#add-new-project:

Adding a new project
--------------------


.. _project_setup#place-translation-files:

Place translation files
+++++++++++++++++++++++

The first task is to place the translation files for your new project in a
location where Pootle can find, write and read them. Pootle is told about this
location by using the :setting:`POOTLE_TRANSLATION_DIRECTORY` setting.

.. note: You probably would like to set a different value for
   :setting:`POOTLE_TRANSLATION_DIRECTORY` in the custom settings file
   generated by the :djadmin:`init` command. By default it is the
   :file:`translations` directory within Pootle codebase, which might be
   difficult for you to find depending on how you installed Pootle.


As described in the section above, the example on this document has a GNU
layout.

A GNU layout means that a given project contains only translation files named
named by language codes. That means that within that project there are no
directories, just files. It also means there can only be a single translation
file per language in a project using this layout.

This is the simplest layout possible, which is the reason we chose it for this
document. There are other project layouts that do not enforce having a single
file per language and that allow directories and subdirectories.

Below you can see an example with two projects using the GNU layout:

::

    `-- translations
        `-- project1
        |   |-- de.po
        |   |-- fr.po
        |   |-- gl.po
        |   |-- pt_BR.po
        |   `-- templates.pot
        `-- project2
            |-- af.po
            |-- eu.po
            |-- pt_BR.po
            |-- templates.pot
            `-- zu.po


You might have noticed that among the regular translation files there are two
files named :file:`templates.pot`. These are the master (template) files that
contain the original strings. Usually these master files contain English
strings, but we find much less confusing to use ``templates`` instead of ``en``
(language code for English).

To get started, create a :file:`my-project` directory in the location pointed
to by :setting:`POOTLE_TRANSLATION_DIRECTORY` and place within it the
translation files for your new project. Make sure you have a
:file:`templates.pot` among those project translation files.


.. _project_setup#create-new-project:

Creating the project
++++++++++++++++++++

At the top of the user interface, you should see your newly created
administrator username. Click on it and the main top menu will be displayed,
and then click on **Admin** item (highlighted in red):

.. image:: ../_static/accessing_admin_interface.png


Now you are in the administration interface. Within the **Projects** tab you
will see a **New Project** button:

.. image:: ../_static/add_project_button.png


Click on that button and the **Add Project** form will be presented to you.
Fill it with the new project details. **Code** must match the name of the
directory within :setting:`POOTLE_TRANSLATION_DIRECTORY` that contains the new
project translation files, in our example :file:`my-project`. You can also
provide a **Full Name** easily readable for humans. You don't need to change
the rest of the fields unless you need to further customize your project.

.. image:: ../_static/add_project_form.png


Once you are done click on the **Save** button below the form to create the
project. Creating the project doesn't actually import all the translations to
Pootle, so you also need to run :djadmin:`update_stores` on the command line of
the Pootle server:

.. code-block:: console

    $ pootle update_stores --project=my-project


This will import all the translations from disk into Pootle, calculate the
translation statistics and calculate the quality check failures. This might
take a while if your project is large.


.. _project_setup#initialize-new-tp:

Enable translation to a new language
------------------------------------

Your main reason for using Pootle probably is to get something translated to as
many languages as possible in a simple way. So you will usually be enabling the
translation to new languages in your project.

To enable translating your project to a new language, go to your project
overview. Then select the **Languages** item in the navigation dropdown and
click on it:

.. image:: ../_static/languages_in_project_dropdown.png


.. note:: Alternatively you can get the same result by clicking on the
   **Languages** link that is displayed below your project form in the
   administration interface:

   .. image:: ../_static/project_form_bottom_links.png


You are presented with a form listing all the existing languages. Here you can
add a new language. In this example the **Arabic** language is selected to be
enabled for the selected project:

.. image:: ../_static/enable_new_tp_through_admin_UI.png


After you click on the **Save** button, the new language will be enabled for
translation. In large projects, it might take a bit to create the new
translation files on disk and initialize the translations from the
**Templates** language.

.. note:: If you want to enable translation to a language that doesn't yet
   exist in your Pootle instance, then you will have to first add the language
   in the **Languages** tab in the administration interface, in a similar way
   to :ref:`creating a new project <project_setup#create-new-project>`.

   Then you can enable translation to that new language in any project by
   following the instructions above.


.. _project_setup#update-strings:

Update strings for existing project
-----------------------------------

Oftentimes, changes to language templates will be made in the software or
project which you are translating in Pootle. Developers may introduce new 
strings, deprecate older ones, or change some of them.

When any of these things occurs, you will need to generate a new
:file:`templates.pot` and use it to bring the translations in Pootle into sync
with the newer templates. This process will be described in more detail in the
following steps.

Once you have received or generated the new :file:`templates.pot` place it
within your project's directory in :setting:`POOTLE_TRANSLATION_DIRECTORY`,
replacing the file with the same name. After that, invoke the following command
which will update the template translations in the Pootle database.

.. code-block:: console

    $ pootle update_stores --project=my-project --language=templates


This command will ensure that new strings are added to the project and any
strings which have been removed are marked as deprecated, and thus will not be
available for translation.

Now each of the languages will need to be brought into sync with the template
language. The first step is to save to disk all the translations for the
project that currently are in Pootle database:

.. code-block:: console

    $ pootle sync_stores --project=my-project


Next step is to update all those translations on disk against the newer
templates. We recommend you to update them on disk using the
:ref:`pot2po <toolkit:pot2po>` command line tool because it can handle other
formats besides Gettext PO.

.. code-block:: console

    $ cd POOTLE_TRANSLATION_DIRECTORY  # Use the actual path!
    $ cd my-project
    $ pot2po -t af.po -i templates.pot -o af.po  # Repeat for each language, changing the language code!


.. note:: Please note that for updating against templates the previous
   translations file for the language must be passed to ``-t`` and the newer
   templates file must be passed to ``-i``.


Once that all the languages in the project are synchronized with the newer
templates you can push them back to Pootle:

.. code-block:: console

    $ pootle update_stores --project=my-project


.. note:: If your project languages contain many translations you might want to
   perform the update against newer templates on a language by language basis.
