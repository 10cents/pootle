#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Database, caching and logging configuration settings."""


# Database backend settings
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': working_path('dbs/pootle.db'),
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
        'ATOMIC_REQUESTS': True,
    }
}


# Cache Backend settings
#
# By default we use Redis as our main cache backend as we potentially rely on
# features specific to Redis.  Other backends will likely not work.
#
# For more # information, check
# http://docs.djangoproject.com/en/dev/topics/cache/#setting-up-the-cache
# and https://github.com/sebleier/django-redis-cache#usage
CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': 'localhost:6379',
        'TIMEOUT': 60,
        'OPTIONS': {
            'DB': 1,
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 50,
                'timeout': 20,
            },
        },
    },
    'stats': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': 'localhost:6379',
        'TIMEOUT': None,
        'OPTIONS': {
            'DB': 2,
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 50,
                'timeout': 20,
            },
        },
    },
}


# Using caching to store sessions improves performance for anonymous
# users. For more info, check
# http://docs.djangoproject.com/en/dev/topics/http/sessions/#configuring-the-session-engine
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

# To improve performance, non-logged users get cached copies of most pages.
# This variable is the number of seconds for which a page will be reused from
# cache. If you have a small server where more real-time statistics is
# important, you can make this lower.
CACHE_MIDDLEWARE_SECONDS = 600

# Keep stats cache for roughly a month
OBJECT_CACHE_TIMEOUT = 2500000

# Set default cache timeout as a week
POOTLE_CACHE_TIMEOUT = 604800

# The directory where Pootle writes event logs to
POOTLE_LOG_DIRECTORY = '/var/log/pootle'

#
# Redis Queue
#

RQ_QUEUES = {
    'default': {
        'HOST': 'localhost',
        'PORT': 6379,
        'DB': 0,
        'PASSWORD': '',
        'DEFAULT_TIMEOUT': 360,
    },
}

# The directory where Pootle writes event logs to
POOTLE_LOG_DIRECTORY = working_path("log")

LOGGING = {
    'version': 1,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'action': {
            'format' : "[%(asctime)s]\t%(message)s",
            'datefmt' : "%Y-%m-%dT%H:%M:%S"
        },
    },
    'handlers': {
        'null': {
            'level':'DEBUG',
            'class':'django.utils.log.NullHandler',
        },
        'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
            'formatter': 'simple'
        },
        # Log to a text file that can be rotated by logrotate
        'log_action': {
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': os.path.join(POOTLE_LOG_DIRECTORY,
                                     'pootle-activity.log'),
            'formatter':'action',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        },
        'action': {
            'handlers': ['log_action'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
